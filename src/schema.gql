# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserDTO {
  id: ID!
  email: String!
  password: String!
  role: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthResponse {
  access_token: String!
}

type CategoryDTO {
  id: Int!
  name: String!
  imageUrl: String
  products: [ProductDTO!]
}

type ProductDTO {
  id: Int!
  name: String!
  description: String!
  price: Float!
  stock: Int!
  stockAlert: Int!
  imageUrl: String
  createdAt: DateTime!
  category: CategoryDTO!
}

type TableDTO {
  id: Int!
  number: Float!
  status: String!
  createdAt: DateTime!
  orders: [OrderDTO!]
}

type OrderDTO {
  id: Int!
  status: String!
  quantity: Int!
  product: ProductDTO!
  table: TableDTO!
  createdAt: DateTime!
}

type MenuDTO {
  id: Int!
  name: String!
  categories: [CategoryDTO!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentDTO {
  id: Int!
  amount: Float!
  status: String!
  paymentType: String!
  order: OrderDTO
}

type StockDTO {
  id: Int!
  productId: Int!
  product: ProductDTO
  movement: String!
  quantity: Int!
  createdAt: DateTime!
}

type SalesReportDTO {
  productId: Int!
  quantitySold: Int!
  totalRevenue: Float!
  createdAt: DateTime!
}

type StockReportDTO {
  id: Int!
  product: ProductDTO
  stockBefore: Int!
  stockAfter: Int!
  movement: String!
  createdAt: DateTime!
}

type FinancialReportDTO {
  id: Int!
  totalRevenue: Float!
  totalExpenses: Float!
  profitOrLoss: Float!
  createdAt: DateTime!
}

type Query {
  users: [UserDTO!]!
  products: [ProductDTO!]!
  productsByCategory(categoryId: Int!): [ProductDTO!]!
  orders(tableId: Int!): [OrderDTO!]!
  getOrderById(id: Int!): OrderDTO!
  categories: [CategoryDTO!]!
  menus: [MenuDTO!]!
  tables: [TableDTO!]!
  table(id: Int!): TableDTO!
  getPayments: [PaymentDTO!]!
  stocks: [StockDTO!]!
  getSalesReports: [SalesReportDTO!]!
  getStockReports: [StockReportDTO!]!
  getFinancialReports: [FinancialReportDTO!]!
}

type Mutation {
  register(email: String!, password: String!, role: String!): UserDTO!
  updateUserRole(id: Float!, role: String!): Boolean!
  login(email: String!, password: String!): AuthResponse!
  requestPasswordReset(email: String!): Boolean!
  resetPassword(token: String!, newPassword: String!): Boolean!
  addProduct(name: String!, description: String!, price: Float!, stock: Float!, categoryId: Float!, imageUrl: String): ProductDTO!
  updateProduct(productId: Float!, name: String, description: String, price: Float, stock: Float, imageUrl: String, categoryId: Float): ProductDTO!
  deleteProduct(id: Float!): ProductDTO!
  updateOrderQuantity(orderId: Int!, quantity: Int!): OrderDTO!
  createOrder(productId: Float!, quantity: Float!, tableId: Float!): OrderDTO!
  updateOrderStatus(id: Int!, status: String!): OrderDTO!
  deleteOrder(id: Int!): OrderDTO!
  createCategory(name: String!, imageUrl: String!): CategoryDTO!
  updateCategory(id: Float!, name: String!, imageUrl: String!): CategoryDTO!
  deleteCategory(id: Float!): CategoryDTO!
  createMenu(name: String!, categoryIds: [Int!]!): MenuDTO!
  updateMenu(id: Float!, name: String!, categoryIds: [Int!]!): MenuDTO!
  deleteMenu(id: Float!): MenuDTO!
  createTable(number: Float!, status: String! = "AVAILABLE"): TableDTO!
  updateTableStatus(id: Int!, status: String!): TableDTO!
  deleteTable(id: Int!): TableDTO!
  createPayment(orderId: Float!, amount: Float!, paymentType: String!): PaymentDTO!
  updatePaymentStatus(id: Float!, status: String!): PaymentDTO!
  addStock(productId: Int!, quantity: Int!, movement: String!): StockDTO!
  updateStock(id: Int!, quantity: Int!): StockDTO!
  deleteStock(id: Int!): StockDTO!
  generateSalesReport: [SalesReportDTO!]!
  generateStockReport(productId: Float!): StockReportDTO!
  generateFinancialReport: FinancialReportDTO!
}