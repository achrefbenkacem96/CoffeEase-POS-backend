datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role       String   @default("Serveur")
  createdAt  DateTime @default(now())
  resetToken String?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  menus     Menu[]    @relation("MenuCategories")
  createdAt DateTime  @default(now())
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  stockAlert  Int           @default(10)
  createdAt   DateTime      @default(now())
  categoryId  Int
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orders      Order[]
  stockReports StockReport[]  // Ajoute cette relation avec StockReport
  stocks      Stock[]        // Ajoute cette relation avec Stock
}



model Order {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  status    String   @default("PENDING")
  createdAt DateTime @default(now())

  payment   Payment? @relation("OrderPayment")
  paymentId Int?
  
  tableId   Int?
  table     Table?   @relation(fields: [tableId], references: [id], name: "TableOrders")
}

model Menu {
  id         Int        @id @default(autoincrement())
  name       String
  categories Category[] @relation("MenuCategories")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Table {
  id        Int      @id @default(autoincrement())
  number    Int      @unique
  status    String   @default("AVAILABLE")
  orders    Order[]  @relation("TableOrders") // Relation avec Order
  createdAt DateTime @default(now())
}

model Payment {
  id          Int      @id @default(autoincrement())
  amount      Float
  status      String   @default("PENDING")
  paymentType String
  createdAt   DateTime @default(now())

  orderId Int   @unique
  order   Order @relation("OrderPayment", fields: [orderId], references: [id]) // Relation bidirectionnelle avec Order
}

model Stock {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  movement    String   // 'ajout' ou 'retrait'
  quantity    Int
  createdAt   DateTime @default(now())
}


model SalesReport {
  id          Int      @id @default(autoincrement())
  productId   Int
  quantitySold Int
  totalRevenue Float
  createdAt   DateTime @default(now())
}


model StockReport {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  stockBefore Int
  stockAfter  Int
  movement    String
  createdAt   DateTime @default(now())
}




model FinancialReport {
  id           Int      @id @default(autoincrement())
  totalRevenue Float
  totalExpenses Float
  profitOrLoss Float
  createdAt    DateTime @default(now())
}
